<?xml version="1.0"?>
<launch>

    <!-- Debug Info -->
    <arg name="debug" default="false" />
    <arg unless="$(arg debug)" name="launch_prefix" value="" />
    <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
    <arg name="robot" default="lwa4p_extended"/>
    <arg name="robot_env" default="empty"/>
    <arg name="enable_gazebo_gui" default="false"/>
    <arg name="component_name" value="arm"/>
    <arg name="ipa_sim" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="sim" default="true"/>
    <arg name="can_device" default="can3"/>
    <arg name="interval_ms" default="10"/>
    <arg name="use_external_sync" default="false"/>
    <arg name="start_external_sync" default="$(arg use_external_sync)"/>
    <arg name="pkg_hardware_config" default="$(find cob_hardware_config)"/>

    <!-- This configuration file will use for predictive control -->
    <!--rosparam command="load" file="$(find frame_tracker)/config/frame_tracker.yaml" /-->

    <!-- start gazebo with empty world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="paused" value="$(arg paused)" />
      <arg name="gui" value="$(arg enable_gazebo_gui)" />
    </include>

    <!-- send lwa4p_extended urdf to param server -->
    <!-- Change schunk pkg with hardware config -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find schunk_lwa4p_extended)/urdf/robot.urdf.xacro'" />

    <!-- push robot_description to factory and spawn robot in gazebo -->
    <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model lwa4p_extended -z 0.01 " respawn="false" output="screen" />

    <!-- upload robot description -->
    <include file="$(find cob_hardware_config)/upload_robot.launch">
    <arg name="robot" value="$(arg robot)"/>
    </include>

    <!-- joint state publisher -->
    <node ns="arm" name="joint_states_relay" pkg="topic_tools" type="relay" args="joint_states /joint_states" cwd="node" respawn="true" output="screen"/>

    <!-- robot state publisher -->
    <include file="$(find cob_bringup)/tools/robot_state_publisher.launch">
    <arg name="robot" value="$(arg robot)"/>
    </include>

    <include unless="$(arg sim)" file="$(find cob_bringup)/drivers/canopen_402.launch">
        <arg name="robot" value="$(arg robot)"/>
        <arg name="component_name" value="$(arg component_name)"/>
        <arg name="can_device" value="$(arg can_device)"/>
        <arg name="interval_ms" value="$(arg interval_ms)"/>
        <arg name="use_external_sync" value="$(arg use_external_sync)"/>
        <arg name="start_external_sync" value="$(arg start_external_sync)"/>
    </include>

    <!-- fake Calibration and HW-Services -->
    <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub /calibrated std_msgs/Bool true" />
    <node if="$(arg sim)" ns="$(arg component_name)" pkg="cob_helper_tools" type="fake_driver.py" name="fake_driver" cwd="node" respawn="false" output="screen"/>

    <include file="$(find cob_bringup)/controllers/generic_controller.launch">
        <arg name="robot" value="$(arg robot)"/>
        <arg name="component_name" value="$(arg component_name)"/>
    </include>

    <group ns="$(arg component_name)">

        <!-- load Cartesian controller config -->
        <rosparam command="load" file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/$(arg component_name)_cartesian_controller.yaml"/>
        <rosparam command="load" file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/$(arg component_name)_self_collision.yaml"/>

        <!-- Cartesian(twist) controllers -->
        <!--node pkg="cob_twist_controller" type="cob_twist_controller_node" name="twist_controller" cwd="node" respawn="false" output="screen">
                <remap from="base/odometry" to="/base/odometry_controller/odometry"/>
                <remap from="base/command" to="/base/twist_mux/command_syncmm"/>
        </node-->
        <node pkg="frame_tracker" type="frame_tracker_node" name="frame_tracker" cwd="node" respawn="false" output="screen"/>
        <node pkg="cob_frame_tracker" type="interactive_frame_target_node" name="interactive_target" cwd="node" respawn="false" output="screen"/>

        <node pkg="cob_obstacle_distance" type="cob_obstacle_distance" name="obstacle_distance" cwd="node" respawn="false" output="screen"/>
<!--
        <node pkg="cob_cartesian_controller" type="cartesian_controller_node" name="cartesian_controller"  cwd="node" respawn="false" output="screen">
                <param name="target_frame" type="str" value="cartesian_target"/>
        </node>
-->

        <group if="$(arg debug)">
                <node pkg="cob_twist_controller" type="debug_evaluate_jointstates_node" name="debug_evaluate_jointstates_node" cwd="node" respawn="false" output="screen"/>
                <node pkg="cob_twist_controller" type="debug_trajectory_marker_node" name="debug_trajectory_marker_node" cwd="node" respawn="false" output="screen"/>
                <node pkg="cob_obstacle_distance" type="debug_obstacle_distance_node" name="debug_obstacle_distance_node" cwd="node" respawn="false" output="screen"/>
                <node pkg="cob_obstacle_distance" type="test_interactive_obstacle_node.py" name="test_interactive_obstacle_node" cwd="node" respawn="false" output="screen"/>
        </group>

    </group>

    <!-- configured rviz -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find predictive_control)/rviz_config/test_description.rviz" />

</launch>
